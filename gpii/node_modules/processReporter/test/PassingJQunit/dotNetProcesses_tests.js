/*!
GPII Process Reporter processes bridge -- gpii.processes.

Copyright 2017 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */

"use strict";

var path = require("path"),
    // This conditional require is to run the electron version of edge.js
    // when this code runs on electron (gpii-app).
    edge = process.versions.electron ? require("electron-edge") : require("edge"),
    fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit");

var dotNetProcessesTests = edge.func({
    source: path.join(__dirname, "dotNetProcessesTests.csx"),
    typeName: "gpii.windows.processes.tests.GetProcessesTests",
    references: ["System.Management.dll"]
});

var runAssertions = function (testResults, callback) {
    console.log ("JS runAssertion() with " + testResults.length + " assertions");
    fluid.each(testResults, function (aTestResult) {
//        console.log ("JS runAssertion() " + JSON.stringify(aTestResult));
        jqUnit.test(
            aTestResult.testName,
            function () {
                jqUnit[aTestResult.assert](
                    aTestResult.message,
                    aTestResult.expected,
                    aTestResult.actual
                );
            }
        );
    });
    callback(null, 99999);
};

var payload = {
    assert: runAssertions
};

/*
function jqUnitAssertEquals (payload, jqUnit.assertEquals) {
    var error = null;
    var result;

    // The payload has to be, "message", "expected", and "actual"
    // A wrapper for each jqUnit.assertX()?
    // The following is an example of jqUnit.assertEquals():
    jqUnit.assertEquals(payload.message, payload.expected, payload.actual);

    callback(error, result);
}
*/
jqUnit.module("C#/.NET process list module");
// jqUnit.test(
//     "Veritas AEterna",
//     function () {
//         jqUnit["assertTrue"]("Veritas AEterna", true);
//     }
// );

debugger;

dotNetProcessesTests(payload, function (error, result) {
    console.log("JS, before error handling");
    if (error) { throw error; }
    console.log("JS, result is: " + result);
});
