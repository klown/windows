/*!
GPII Process Reporter processes bridge -- gpii.processes.

Copyright 2017 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */

"use strict";

var path = require("path"),
    // This conditional require is to run the electron version of edge.js
    // when this code runs on electron (gpii-app).
    edge = process.versions.electron ? require("electron-edge") : require("edge"),
    fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit");

var dotNetProcessesTests = edge.func({
    source: path.join(__dirname, "dotNetProcessesTests.csx"),
    typeName: "gpii.windows.processes.tests.GetProcessesTests",
    references: ["System.Management.dll"]
});

/**
 * A callback function to pass to C#/.NET for it to call with a set of tests
 * and their results.  The tests results are evaluated using jqUnit.
 * @param {Array}.      An array of test fixtures each containing an array of
 *                      objects with expected, actual, and/or error results.
 * @param {Function).   A callback to execute when finished, passing control
 *                      back to C#.
 */
var runAssertions = function (testResults, callback) {
    fluid.each(testResults, function (testFixture) {
        jqUnit.test(
            testFixture.testName,
            function () {
                for (var i = 0; i < testFixture.testAsserts.length; i++) {
                    var anAssertion = testFixture.testAsserts[i];
                    if (anAssertion.error !== null) {
                        jqUnit.fail(anAssertion.error);
                    } else {
                        jqUnit[anAssertion.assert](
                            anAssertion.message,
                            anAssertion.expected,
                            anAssertion.actual
                        );
                    }
                }
            });
    });
    callback(null, "success");
};

// Execute a set of tests within C#/.NET, collect the test results, and evaluate
// them using the runAsstions() function passed into C#.
dotNetProcessesTests({assert: runAssertions}, function (error, result) {
    console.log("JS, before error handling");
    if (error) { throw error; }
    console.log("JS, result is: " + result);
});
