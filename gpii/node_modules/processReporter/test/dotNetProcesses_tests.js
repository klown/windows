/*!
GPII Process Reporter processes bridge -- gpii.processes.

Copyright 2017 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */

"use strict";

var path = require("path"),
    // This conditional require is to run the electron version of edge.js
    // when this code runs on electron (gpii-app).
    edge = process.versions.electron ? require("electron-edge") : require("edge"),
    fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit");

var dotNetProcesses = edge.func({
    source: path.join(__dirname, "../dotNetProcesses.csx"),
    typeName: "gpii.windows.processes.GetProcesses",
    references: ["System.Management.dll"]
});

jqUnit.module("C#/.NET process list module");
jqUnit.test(
    "Test dotNetProcesses(<command>) using the 'process' object itself",
    function () {
        var processCommand = path.parse(process.execPath).base;
        var procInfos = dotNetProcesses(processCommand, true);
        jqUnit.assertNotEquals(
            "Listing node processes", 0, procInfos.length
        );
        procInfos.forEach(function (aProcInfo) {
            jqUnit.assertEquals(
                "Node commmand name", "node.exe", aProcInfo.command
            );
        });
    }
);

jqUnit.test(
    "Test dotNetProcesses(<command>) with non-existent process",
    function () {
        var procInfos = dotNetProcesses("Tx9273sc", true);
        jqUnit.assertEquals("No process found", 0, procInfos.length);
    }
);

jqUnit.test(
    "Test dotNetProcesses(<pid>) using the 'process' object",
    function () {
        // Check for the presence of this nodejs processs itself -- it must
        // be in the process list since this code is running inside that
        // process.
        var nodeProc = dotNetProcesses(process.pid, true);
        jqUnit.assertNotNull("Searching for this process", nodeProc);
        jqUnit.assertEquals("Only one process returned", 1, nodeProc.length);
        jqUnit.assertEquals("Matching pid", process.pid, nodeProc[0].pid);
        jqUnit.assertEquals("Matching command name", "node.exe", nodeProc[0].command);
    }
);

jqUnit.test(
    "Test dotNetProcesses(<pid>) with invalid pid",
    function () {
        var nodeProc = dotNetProcesses(-1, true);
        jqUnit.assertEquals("No process found", 0, nodeProc.length);
    }
);

jqUnit.test(
    "Test dotNetProcesses() with no arguments; full list of running processes",
    function () {
        var procInfos = dotNetProcesses(undefined, true);
        jqUnit.assertNotEquals("Full process list", 0, procInfos.length);

        // System process whose pid is 0 (zero) must be running.
        var zero = fluid.find(procInfos, function (aProcInfo) {
            if (aProcInfo.pid === 0) {
                return aProcInfo;
            }
        }, null);
        jqUnit.assertNotNull("Process 0 (zero)", zero);
    }
);
